2+2
3+3
help()
5+5
x <- 10
x
?reserved
library(R.matlab)
install.packages("matlab")
install.packages("matlab")
install.packages("matlab")
install.packages("matlab")
eye
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# From the official R documentation
browseURL("http://j.mp/2aFZUrJ")
# CSV
rio_csv <- import("~/Desktop/mbb.csv")
# CSV
rio_csv <- import("~/Desktop/mbb.csv")
head(rio_csv)
# TXT
rio_txt <- import("~/Desktop/mbb.txt")
head(rio_txt)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, rio)
# From the official R documentation
browseURL("http://j.mp/2aFZUrJ")
# CSV
rio_csv <- import("~/Desktop/mbb.csv")
head(rio_csv)
# TXT
rio_txt <- import("~/Desktop/mbb.txt")
head(rio_txt)
# Excel XLSX
rio_xlsx <- import("~/Desktop/mbb.xlsx")
head(rio_xlsx)
?View
View(rio_csv)
# Load a spreadsheet that has been saved as tab-delimited
# text file. Need to give complete address to file. This
# command gives an error on missing data but works on
# complete data.
r_txt1 <- read.table("~/Desktop/mbb.txt", header = TRUE)
# This works with missing data by specifying the separator:
# \t is for tabs, sep = "," for commas. R converts missing
# to "NA"
r_txt2 <- read.table("~/Desktop/mbb.txt",
header = TRUE,
sep = "\t")
# CSV FILES
# Don't have to specify delimiters for missing data
# because CSV means "comma separated values"
trends.csv <- read.csv("~/Desktop/mbb.csv", header = TRUE)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# Clear mind :)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, rio)
# From the official R documentation
browseURL("http://j.mp/2aFZUrJ")
# CSV
rio_csv <- import("~/Desktop/mbb.csv")
head(rio_csv)
# TXT
rio_txt <- import("~/Desktop/mbb.txt")
head(rio_txt)
# Excel XLSX
rio_xlsx <- import("~/Desktop/mbb.xlsx")
head(rio_xlsx)
?View
View(rio_csv)
# Load a spreadsheet that has been saved as tab-delimited
# text file. Need to give complete address to file. This
# command gives an error on missing data but works on
# complete data.
r_txt1 <- read.table("~/Desktop/mbb.txt", header = TRUE)
# This works with missing data by specifying the separator:
# \t is for tabs, sep = "," for commas. R converts missing
# to "NA"
r_txt2 <- read.table("~/Desktop/mbb.txt",
header = TRUE,
sep = "\t")
# CSV FILES
# Don't have to specify delimiters for missing data
# because CSV means "comma separated values"
trends.csv <- read.csv("~/Desktop/mbb.csv", header = TRUE)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
trends.csv
trends.csv
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
?mtcars
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
# Save hierarchical clustering to "hc." This codes uses
# pipes from dplyr.
hc <- cars   %>%  # Get cars data
dist   %>%  # Compute distance/dissimilarity matrix
hclust      # Computer hierarchical clusters
plot(hc)          # Plot dendrogram
rect.hclust(hc, k = 2, border = "gray")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
rect.hclust(hc, k = 3, border = "blue")
rect.hclust(hc, k = 4, border = "green4")
rect.hclust(hc, k = 5, border = "darkred")
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, tidyverse)
head(mtcars)
cars <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
head(cars)
# For entire data frame ####################################
pc <- prcomp(cars,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)   # Sets unit variance (helpful)
pc <- prcomp(~ mpg + cyl + disp + hp + wt + qsec + am +
gear + carb,
data = mtcars,
center = TRUE,
scale = TRUE)
# Get summary stats
summary(pc)
# Screeplot for number of components
plot(pc)
# Get standard deviations and rotation
pc
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
# See how cases load on PCs
predict(pc) %>% round(2)
# See how cases load on PCs
predict(pc) %>% round(2)
# Biplot of first two components
biplot(pc)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[, -12])
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
lm
# Or specify variables individually
reg1 <- lm(RTEN ~ CONT + INTG + DMNR + DILG + CFMG +
DECI + PREP + FAMI + ORAL + WRIT + PHYS,
data = USJudgeRatings)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
anova(reg1)            # Coefficients w/inferential tests
coef(reg1)             # Coefficients (same as reg1)
confint(reg1)          # CI for coefficients
resid(reg1)            # Residuals case-by-case
hist(residuals(reg1))  # Histogram of residuals
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
# Stagewise: Like stepwise but with better generalizability
forward <- lars(x, y, type = "forward.stagewise")
# LAR: Least Angle Regression
lar <- lars(x, y, type = "lar")
# LASSO: Least Absolute Shrinkage and Selection Operator
lasso <- lars(x, y, type = "lasso")
# Comparison of R^2 for new models
r2comp <- c(stepwise$R2[6], forward$R2[6],
lar$R2[6], lasso$R2[6]) %>%
round(2)
names(r2comp) <- c("stepwise", "forward", "lar", "lasso")
r2comp  # Show values of R^2
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
?USJudgeRatings
head(USJudgeRatings)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[, -12])
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Or specify variables individually
reg1 <- lm(RTEN ~ CONT + INTG + DMNR + DILG + CFMG +
DECI + PREP + FAMI + ORAL + WRIT + PHYS,
data = USJudgeRatings)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
anova(reg1)            # Coefficients w/inferential tests
coef(reg1)             # Coefficients (same as reg1)
confint(reg1)          # CI for coefficients
resid(reg1)            # Residuals case-by-case
hist(residuals(reg1))  # Histogram of residuals
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
# Stagewise: Like stepwise but with better generalizability
forward <- lars(x, y, type = "forward.stagewise")
# LAR: Least Angle Regression
lar <- lars(x, y, type = "lar")
# LASSO: Least Absolute Shrinkage and Selection Operator
lasso <- lars(x, y, type = "lasso")
# Comparison of R^2 for new models
r2comp <- c(stepwise$R2[6], forward$R2[6],
lar$R2[6], lasso$R2[6]) %>%
round(2)
names(r2comp) <- c("stepwise", "forward", "lar", "lasso")
r2comp  # Show values of R^2
install.packages('rsconnect')
rsconnect::setAccountInfo(name='yktncl',
token='3BD63A41711A2AD3A2DD308A4AC1E331',
secret='<SECRET>')
rsconnect::setAccountInfo(name='yktncl',
token='3BD63A41711A2AD3A2DD308A4AC1E331',
secret='4G01Fl8IBKJjncfWiEfIe0fzZsOg1cgqcow9acnj')
install.packages(c('ggplot2', 'shiny'))
install.packages(c("ggplot2", "shiny"))
shiny::runApp('Documents/YLL/PL/R/1_ShinyApp')
shiny::runApp('Documents/YLL/PL/R/1_ShinyApp')
shiny::runApp('Documents/YLL/PL/R/1_ShinyApp')
getwd()
setwd('/Users/kursattuncel/devel/covid_data')
getwd()
df <- read.table("covidtr.txt",
header = TRUE)
df <- read.table("covid_tr.txt",
header = TRUE)
print(..)
prinf(df)
print(df)
data("iris")
datatable(iris)
datatable(mtcars)
df
plot(df)
help plot
plot(df$date, $)
plot(df$date, df$conf_total)
class(df$date)=="Date"
df$date <- as.Date(df$date, format="%d.%m.%Y")
class(df$date)=="Date"
plot(df$date, df$conf_total)
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases")
?plot
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "l")
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b")
plot.ts(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b")
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b")
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b", xaxt="n")
axis(side = 1, at = x,labels = T)
axis(side = 1, at = x,labels = T)
axis(side = 1, at = df$date,labels = T)
axis(side = 1, at = df$date,labels = T)
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
> axis(side = 2, at = df$conf,labels = T)
> axis(side = 0, at = df$conf,labels = T)
> axis(side = 1, at = df$conf,labels = T)
axis(2, at = seq(0, 20000, by = 100), las=2)
axis(2, at = seq(0, 20000, by = 1000), las=2)
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis(2, at = seq(0, 20000, by = 1000), las=2)
axis(1, at = df$date, las=2)
class(df$date)=="Date"
df$date <- as.Date(df$date, format="%d.%m.%Y")
axis(1, at = df$date, las=2)
axis.Date(1, at=seq(min(df$date), max(df$date), by="months"), format="%m-%Y")
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="months"), format="%m-%Y")
axis.Date(1, at=seq(min(df$date), max(df$date), by="months"), format="%d-%m-%Y")
axis.Date(1, at=seq(min(df$date), max(df$date), by="months"), format="%m-%Y")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%m-%Y")
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%m-%Y")
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2)
plot(df$date, df$conf_total, xlab="Date", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2)
plot(df$date, df$conf_total, ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2)
ğğğğğğğğ*------------*
plot(df$date, df$conf_total, ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
plot(df$date, df$conf_total, xlab="", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2)
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, ex.axis = 0.9, font =3, family = 'mono')
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.9, font =3, family = 'mono')
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.9, font =3, family = 'mono')
plot(df$date, df$conf_total, xlab="", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2)
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.9, font =3, family = 'mono')
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.9, font =2, family = 'mono')
plot(df$date, df$conf_total, xlab="", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.9, font =2, family = 'mono')
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.9, font =1, family = 'mono')
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.1, font =1, family = 'mono')
plot(df$date, df$conf_total, xlab="", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.1, font =1, family = 'mono')
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.5, font =1, family = 'mono')
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.5, font = 2, family = 'mono')
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.5, font = 3, family = 'mono')
plot(df$date, df$conf_total, xlab="", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.5, font = 3, family = 'mono')
plot(df$date, df$conf_total, xlab="", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.5, font = 2, family = 'mono')
axis(2, at = seq(0, 20000, by = 1000), las=2)
axis(2, at = seq(0, 20000, by = 1000), las=2, cex.axis = 0.5, font = 2, family = 'mono')
plot(df$date, df$conf_total, xlab="", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis(2, at = seq(0, 20000, by = 1000), las=2, cex.axis = 0.5, font = 2, family = 'mono')
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.5, font = 2, family = 'mono')
axis(2, at = seq(0, 20000, by = 1000), las=2, cex.axis = 0.5, font = 2, family = 'mono')
clear
plot(df$date, df$conf_total, xlab="", ylab="Confirmed Cases", type = "b", xaxt="n", yaxt="n")
axis.Date(1, at=seq(min(df$date), max(df$date), by="days"), format="%d-%m-%Y", las = 2, cex.axis = 0.5, font = 2, family = 'mono')
axis(2, at = seq(0, 20000, by = 1000), las=2, cex.axis = 0.5, font = 2, family = 'mono')
