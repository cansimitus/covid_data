df <- merge(df, df_rec, by = "Date")
setDT(df)[, Confirmed_Daily := Confirmed - shift(Confirmed, fill = first(Confirmed))]
setDT(df)[, Death_Daily := Death - shift(Death, fill = first(Death))]
setDT(df)[, Recovered_Daily := Recovered - shift(Recovered, fill = first(Recovered))]
df <- as.data.frame(df)
df <- df[df$Confirmed > 0,]
df['Country']='France'
df_France<- df
par(new = T)
with(df, plot(seq(1,nrow(df)), Recovered_Daily, xlab="Days of Incidence", ylab="Daily Recovery", ylim=c(0,max(Recovered_Daily)), type = "b", xaxt="n", yaxt="n"))
df_rec <- t(cdf[cdf$Country.Region == "Germany" & cdf$Province.State == "",5:81])
df_rec <- data.frame(names = row.names(df_rec), df_rec)
names(df_rec) <- c("Date","Recovered")
df_rec$Date <- as.Date(df_rec$Date, format="X%m.%d.%y")
rownames(df_rec) <- seq(1,77)
df_death <- t(cdf[cdf$Country.Region == "Germany" & cdf$Province.State == "",5:81])
df_death <- data.frame(names = row.names(df_death), df_death)
names(df_death) <- c("Date","Death")
df_death$Date <- as.Date(df_death$Date, format="X%m.%d.%y")
rownames(df_death) <- seq(1,77)
df_conf <- t(cdf[cdf$Country.Region == "Germany" & cdf$Province.State == "",5:81])
df_conf <- data.frame(names = row.names(df_conf), df_conf)
names(df_conf) <- c("Date","Confirmed")
df_conf$Date <- as.Date(df_conf$Date, format="X%m.%d.%y")
rownames(df_conf) <- seq(1,77)
df <- merge(df_conf, df_death, by = "Date")
df <- merge(df, df_rec, by = "Date")
setDT(df)[, Confirmed_Daily := Confirmed - shift(Confirmed, fill = first(Confirmed))]
setDT(df)[, Death_Daily := Death - shift(Death, fill = first(Death))]
setDT(df)[, Recovered_Daily := Recovered - shift(Recovered, fill = first(Recovered))]
df <- as.data.frame(df)
df <- df[df$Confirmed > 0,]
df['Country']='Germany'
df_Germany<- df
par(new = T)
with(df, plot(seq(1,nrow(df)), Recovered_Daily, xlab="Days of Incidence", ylab="Daily Recovery", ylim=c(0,max(Recovered_Daily)), type = "b", xaxt="n", yaxt="n"))
axis (2)
axis (1)
df_all <- rbind(df_Turkey, df_France)
View(df_all)
df_all <- rbind(df_Turkey, df_France, df_Germany)
df_rec <- t(cdf[cdf$Country.Region == "Germany" & cdf$Province.State == "",5:81])
df_rec <- data.frame(names = row.names(df_rec), df_rec)
names(df_rec) <- c("Date","Recovered")
df_rec$Date <- as.Date(df_rec$Date, format="X%m.%d.%y")
rownames(df_rec) <- seq(1,77)
df_death <- t(cdf[cdf$Country.Region == "Germany" & cdf$Province.State == "",5:81])
df_death <- data.frame(names = row.names(df_death), df_death)
names(df_death) <- c("Date","Death")
df_death$Date <- as.Date(df_death$Date, format="X%m.%d.%y")
rownames(df_death) <- seq(1,77)
df_conf <- t(cdf[cdf$Country.Region == "Germany" & cdf$Province.State == "",5:81])
df_conf <- data.frame(names = row.names(df_conf), df_conf)
names(df_conf) <- c("Date","Confirmed")
df_conf$Date <- as.Date(df_conf$Date, format="X%m.%d.%y")
rownames(df_conf) <- seq(1,77)
df <- merge(df_conf, df_death, by = "Date")
df <- merge(df, df_rec, by = "Date")
setDT(df)[, Confirmed_Daily := Confirmed - shift(Confirmed, fill = first(Confirmed))]
setDT(df)[, Death_Daily := Death - shift(Death, fill = first(Death))]
setDT(df)[, Recovered_Daily := Recovered - shift(Recovered, fill = first(Recovered))]
df <- as.data.frame(df)
df <- df[df$Confirmed > 0,]
df['Country']='Germany'
df_Germany<- df
df_all <- rbind(df_Turkey, df_France, df_Germany)
par(mar = c(5,5,2,5))
with(df, plot(seq(1,nrow(df)), Recovered_Daily, xlab="Days of Incidence", ylab="Daily Recovery", ylim=c(0,max(Recovered_Daily)), type = "b", xaxt="n", yaxt="n"))
axis (2)
axis (1)
require("data.table")
cdf <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = TRUE)
require("data.table")
cdf <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(cdf) <- c("date","death")
cdf$date <- as.Date(cdf$date, format="%d/%m/%y")
class(cdf$date)
View(cdf)
View(cdf)
View(cdf)
View(cdf)
require("data.table")
cdf <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(cdf) <- c("date","death")
cdf$date <- as.Date(cdf$date, format="%d/%m/%Y")
class(cdf$date)
View(cdf)
View(cdf)
require("data.table")
cdf <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(cdf) <- c("date","death")
cdf$date <- as.Date(cdf$date, format="%d/%m/%Y")
class(cdf$date)
plot(cdf)
require("data.table")
library(ggplot2)
library(plotly)
library(gapminder)
cdf <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(cdf) <- c("date","death")
cdf$date <- as.Date(cdf$date, format="%d/%m/%Y")
class(cdf$date)
plot(cdf)
install.packages("plotly")
install.packages("gapminder")
require("data.table")
library(ggplot2)
library(plotly)
library(gapminder)
cdf <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(cdf) <- c("date","death")
cdf$date <- as.Date(cdf$date, format="%d/%m/%Y")
class(cdf$date)
plot(cdf)
require("data.table")
library(ggplot2)
library(plotly)
library(gapminder)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
data %>%
tail(10) %>%
ggplot( aes(x=date, y=value)) +
geom_line() +
geom_point()
require("data.table")
library(ggplot2)
library(plotly)
library(gapminder)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
data %>%
tail(10) %>%
ggplot( aes(x=date, y=death)) +
geom_line() +
geom_point()
data %>%
ggplot( aes(x=date, y=death)) +
geom_line() +
geom_point()
require("data.table")
library(ggplot2)
library(plotly)
library(gapminder)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- gapminder %>%
ggplot(data) +
geom_point() +
theme_bw()
ggplotly(p)
require("data.table")
library(ggplot2)
library(plotly)
library(gapminder)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- gapminder %>%
ggplot(aes(data)) +
geom_point() +
theme_bw()
ggplotly(p)
install.packages("dygraphs","xts","lubridate")
install.packages("dygraphs")
install.packages("xts")
install.packages("lubridate")
library(dygraphs)
library(xts)          # To make the convertion data-frame / xts format
library(tidyverse)
library(lubridate)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
don <- xts(x = data$death, order.by = data$date)
# Finally the plot
p <- dygraph(don) %>%
dyOptions(labelsUTC = TRUE, fillGraph=TRUE, fillAlpha=0.1, drawGrid = FALSE, colors="#D8AE5A") %>%
dyRangeSelector() %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE)  %>%
dyRoller(rollPeriod = 1)
library(dygraphs)
library(xts)          # To make the convertion data-frame / xts format
library(tidyverse)
library(lubridate)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
don <- xts(x = data$death, order.by = data$date)
# Finally the plot
p <- dygraph(don) %>%
dyOptions(labelsUTC = TRUE, fillGraph=TRUE, fillAlpha=0.1, drawGrid = FALSE, colors="#D8AE5A") %>%
dyRangeSelector() %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE)  %>%
dyRoller(rollPeriod = 1)
library(dygraphs)
library(xts)          # To make the convertion data-frame / xts format
library(tidyverse)
library(lubridate)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
don <- xts(x = data$death, order.by = data$date)
# Finally the plot
p <- dygraph(don) %>%
dyOptions(labelsUTC = TRUE, fillGraph=TRUE, fillAlpha=0.1, drawGrid = FALSE, colors="#D8AE5A") %>%
dyRangeSelector() %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE)  %>%
dyRoller(rollPeriod = 1)
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
install.packages("hrbrthemes")
install.packages("hrbrthemes")
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
library(ggplot2)
library(dplyr)
library(plotly)
library(ins)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
install.packages('Cairo')
install.packages('Cairo')
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
install.packages(c("backports", "BH", "broom", "callr", "caret", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "fansi", "farver", "forcats", "foreach", "fs", "glue", "hms", "jsonlite", "knitr", "lava", "lifecycle", "mime", "mnormt", "ModelMetrics", "modelr", "openxlsx", "pillar", "plyr", "prettyunits", "processx", "ps", "psych", "Rcpp", "RCurl", "recipes", "remotes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "SQUAREM", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "xml2", "yaml"))
install.packages(c("boot", "class", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "survival"), lib="/usr/local/Cellar/r/3.6.1_1/lib/R/library")
install.packages(c("backports", "BH", "broom", "callr", "caret", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "fansi", "farver", "forcats", "foreach", "fs", "glue", "hms", "jsonlite", "knitr", "lava", "lifecycle", "mime", "mnormt", "ModelMetrics", "modelr", "openxlsx", "pillar", "plyr", "prettyunits", "processx", "ps", "psych", "Rcpp", "RCurl", "recipes", "remotes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "SQUAREM", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "xml2", "yaml"))
install.packages(c("boot", "class", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "survival"), lib="/usr/local/Cellar/r/3.6.1_1/lib/R/library")
install.packages(c("backports", "BH", "broom", "callr", "caret", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "fansi", "farver", "forcats", "foreach", "fs", "glue", "hms", "jsonlite", "knitr", "lava", "lifecycle", "mime", "mnormt", "ModelMetrics", "modelr", "openxlsx", "pillar", "plyr", "prettyunits", "processx", "ps", "psych", "Rcpp", "RCurl", "recipes", "remotes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "SQUAREM", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "caret", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "fansi", "farver", "forcats", "foreach", "fs", "glue", "hms", "jsonlite", "knitr", "lava", "lifecycle", "mime", "mnormt", "ModelMetrics", "modelr", "openxlsx", "pillar", "plyr", "prettyunits", "processx", "ps", "psych", "Rcpp", "RCurl", "recipes", "remotes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "SQUAREM", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "caret", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "fansi", "farver", "forcats", "foreach", "fs", "glue", "hms", "jsonlite", "knitr", "lava", "lifecycle", "mime", "mnormt", "ModelMetrics", "modelr", "openxlsx", "pillar", "plyr", "prettyunits", "processx", "ps", "psych", "Rcpp", "RCurl", "recipes", "remotes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "SQUAREM", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "caret", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "fansi", "farver", "forcats", "foreach", "fs", "glue", "hms", "jsonlite", "knitr", "lava", "lifecycle", "mime", "mnormt", "ModelMetrics", "modelr", "openxlsx", "pillar", "plyr", "prettyunits", "processx", "ps", "psych", "Rcpp", "RCurl", "recipes", "remotes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "SQUAREM", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "caret", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "fansi", "farver", "forcats", "foreach", "fs", "glue", "hms", "jsonlite", "knitr", "lava", "lifecycle", "mime", "mnormt", "ModelMetrics", "modelr", "openxlsx", "pillar", "plyr", "prettyunits", "processx", "ps", "psych", "Rcpp", "RCurl", "recipes", "remotes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "SQUAREM", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "caret", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "fansi", "farver", "forcats", "foreach", "fs", "glue", "hms", "jsonlite", "knitr", "lava", "lifecycle", "mime", "mnormt", "ModelMetrics", "modelr", "openxlsx", "pillar", "plyr", "prettyunits", "processx", "ps", "psych", "Rcpp", "RCurl", "recipes", "remotes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "SQUAREM", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "xml2", "yaml"))
install.packages(c("backports", "BH", "broom", "callr", "caret", "cli", "curl", "data.table", "DBI", "digest", "dplyr", "fansi", "farver", "forcats", "foreach", "fs", "glue", "hms", "jsonlite", "knitr", "lava", "lifecycle", "mime", "mnormt", "ModelMetrics", "modelr", "openxlsx", "pillar", "plyr", "prettyunits", "processx", "ps", "psych", "Rcpp", "RCurl", "recipes", "remotes", "reshape2", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "shiny", "SQUAREM", "stringi", "tibble", "tidyr", "tidyselect", "tinytex", "vctrs", "xfun", "XML", "xml2", "yaml"))
install.packages("stringi")
install.packages(c("boot", "class", "foreign", "KernSmooth", "lattice"), lib="/usr/local/Cellar/r/3.6.1_1/lib/R/library")
install.packages(c("MASS", "Matrix", "mgcv", "nlme", "nnet", "survival"), lib="/usr/local/Cellar/r/3.6.1_1/lib/R/library")
install.packages('Cairo')
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
install.packages('Cairo')
hrbrthemes::import_roboto_condensed()
hrbrthemes::import_roboto_condensed()
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
capabilities()
capabilities()
install.packages("magick")
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
install.packages('Cairo')
install.packages('Cairo')
install.packages("Cairo",,"http://rforge.net/")
install.packages("Cairo",,"http://rforge.net/",type="source")
install.packages("Cairo",,"http://rforge.net/",type="source")
install.packages('Cairo')
install.packages('Cairo')
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
install.packages("isoband")
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
p <- data %>%
ggplot( aes(x=date, y=death)) +
geom_area(fill="#69b3a2", alpha=0.5) +
geom_line(color="#69b3a2") +
ylab("bitcoin price ($)") +
theme_ipsum()
# Turn it interactive with ggplotly
p <- ggplotly(p)
p
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
fig <- plot_ly(data, x = ~x, y = ~random_y, type = 'scatter', mode = 'lines')
fig
fig <- plot_ly(data, x = date, y = death, type = 'scatter', mode = 'lines')
fig
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
fig <- plot_ly(data, type = 'scatter', mode = 'lines')
fig
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2016_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
fig <- plot_ly(data, x = data$date, y = data$death, type = 'scatter', mode = 'lines')
fig
library(ggplot2)
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2008_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
fig <- plot_ly(data, x = data$date, y = data$death, type = 'scatter', mode = 'lines')
fig
library(dplyr)
library(plotly)
library(hrbrthemes)
data <- read.table("istanbul_deaths_2008_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
fig <- plot_ly(data, x = data$date, y = data$death, type = 'scatter', mode = 'lines')
fig
library(plotly)
data <- read.table("istanbul_deaths_2008_2020.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
fig <- plot_ly(data, x = data$date, y = data$death, type = 'scatter', mode = 'lines')
fig
install.packages("Cairo")
library(plotly)
data <- read.table("results_trabzon.csv", sep=",", header = FALSE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
fig <- plot_ly(data, x = data$date, y = data$death, type = 'scatter', mode = 'lines')
fig
View(data)
library(plotly)
data <- read.table("results_trabzon.csv", sep=",", header = TRUE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
fig <- plot_ly(data, x = data$date, y = data$death, type = 'scatter', mode = 'lines')
fig
library(plotly)
data <- read.table("results_trabzon.csv", sep=",", header = TRUE)
names(data) <- c("date","death")
data$date <- as.Date(data$date, format="%d/%m/%Y")
fig <- plot_ly(data, x = data$date, y = data$death, type = 'scatter', mode = 'lines')
fig
